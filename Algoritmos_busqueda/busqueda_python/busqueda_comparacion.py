import random
import time
import math
import os
import json
import csv
import matplotlib.pyplot as plt

# ==============================
# Algoritmos de b칰squeda
# ==============================

# Fuente: GeeksforGeeks - Binary Search
# https://www.geeksforgeeks.org/binary-search/
def busqueda_binaria(arr, x):
    izquierda, derecha = 0, len(arr) - 1
    while izquierda <= derecha:
        medio = (izquierda + derecha) // 2
        if arr[medio] == x:
            return medio
        elif arr[medio] < x:
            izquierda = medio + 1
        else:
            derecha = medio - 1
    return -1

# Fuente: GeeksforGeeks - Ternary Search
# https://www.geeksforgeeks.org/ternary-search/
def busqueda_ternaria(arr, x):
    izquierda, derecha = 0, len(arr) - 1
    while izquierda <= derecha:
        tercio1 = izquierda + (derecha - izquierda) // 3
        tercio2 = derecha - (derecha - izquierda) // 3
        if arr[tercio1] == x:
            return tercio1
        elif arr[tercio2] == x:
            return tercio2
        elif x < arr[tercio1]:
            derecha = tercio1 - 1
        elif x > arr[tercio2]:
            izquierda = tercio2 + 1
        else:
            izquierda = tercio1 + 1
            derecha = tercio2 - 1
    return -1

# Fuente: GeeksforGeeks - Jump Search
# https://www.geeksforgeeks.org/jump-search/
def busqueda_por_saltos(arr, x):
    n = len(arr)
    salto = int(math.sqrt(n))
    prev = 0

    while prev < n and arr[min(salto, n) - 1] < x:
        prev = salto
        salto += int(math.sqrt(n))
        if prev >= n:
            return -1

    for i in range(prev, min(salto, n)):
        if arr[i] == x:
            return i
    return -1

# ==============================
# Generaci칩n y lectura de datos
# ==============================

def generar_arreglo(n, filename):
    """Genera un arreglo aleatorio de 8 d칤gitos y lo guarda en un archivo."""
    if not os.path.exists(filename):
        print(f"Generando archivo {filename} con {n} elementos...")
        arr = sorted(random.sample(range(10_000_000, 99_999_999), n))
        with open(filename, "w") as f:
            f.write("\n".join(map(str, arr)))
    else:
        print(f"Archivo {filename} ya existe, se reutilizar치n los datos.")

def leer_arreglo(filename):
    """Lee un arreglo desde un archivo de texto."""
    with open(filename, "r") as f:
        return [int(line.strip()) for line in f]

# ==============================
# Medici칩n de tiempos
# ==============================

def medir_tiempo(funcion, arr, x):
    inicio = time.perf_counter()
    funcion(arr, x)
    fin = time.perf_counter()
    return fin - inicio

# ==============================
# Ejecuci칩n principal
# ==============================

tama침os = [10_000, 100_000, 1_000_000]
archivos = [f"datos_{n}.txt" for n in tama침os]

# Generar los archivos si no existen
for n, archivo in zip(tama침os, archivos):
    generar_arreglo(n, archivo)

resultados = {"Binaria": [], "Ternaria": [], "Saltos": []}

for n, archivo in zip(tama침os, archivos):
    arr = leer_arreglo(archivo)
    x = random.choice(arr)  # elemento a buscar

    print(f"\n游댳 Ejecutando b칰squedas en arreglo de {n} elementos...")

    t_binaria = medir_tiempo(busqueda_binaria, arr, x)
    t_ternaria = medir_tiempo(busqueda_ternaria, arr, x)
    t_saltos = medir_tiempo(busqueda_por_saltos, arr, x)

    resultados["Binaria"].append(t_binaria)
    resultados["Ternaria"].append(t_ternaria)
    resultados["Saltos"].append(t_saltos)

    print(f"   B칰squeda Binaria: {t_binaria:.6f} s")
    print(f"   B칰squeda Ternaria: {t_ternaria:.6f} s")
    print(f"   B칰squeda por Saltos: {t_saltos:.6f} s")

# ==============================
# Guardar resultados CSV y JSON
# ==============================

csv_filename = "resultados_busquedas.csv"
json_filename = "resultados_busquedas.json"

# Guardar en CSV con el nuevo formato
with open(csv_filename, "w", newline="") as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(["Algoritmo", "Tama침o", "Tiempo_ns", "Lenguaje"])
    for i, n in enumerate(tama침os):
        # Convertir de segundos a nanosegundos
        writer.writerow(["Binary", n, int(resultados["Binaria"][i] * 1_000_000_000), "Python"])
        writer.writerow(["Ternary", n, int(resultados["Ternaria"][i] * 1_000_000_000), "Python"])
        writer.writerow(["Jump", n, int(resultados["Saltos"][i] * 1_000_000_000), "Python"])

# Guardar en JSON
data_json = {
    "tama침os": tama침os,
    "resultados": resultados
}
with open(json_filename, "w") as jf:
    json.dump(data_json, jf, indent=4)

print(f"\n游늬 Resultados guardados en: {csv_filename} y {json_filename}")

# ==============================
# Gr치fico comparativo
# ==============================

etiquetas = [str(t) for t in tama침os]
x = range(len(tama침os))
ancho = 0.25

plt.figure(figsize=(10, 6))
plt.bar([i - ancho for i in x], resultados["Binaria"], width=ancho, label="Binaria")
plt.bar(x, resultados["Ternaria"], width=ancho, label="Ternaria")
plt.bar([i + ancho for i in x], resultados["Saltos"], width=ancho, label="Saltos")

for metodo, shift in zip(resultados.keys(), [-ancho, 0, ancho]):
    for i, valor in enumerate(resultados[metodo]):
        plt.text(i + shift, valor + 0.00001, f"{valor:.6f}s", ha='center', fontsize=9)

plt.xticks(x, etiquetas)
plt.ylabel("Tiempo de ejecuci칩n (segundos)")
plt.xlabel("Tama침o del arreglo")
plt.title("Comparaci칩n de tiempos de b칰squeda en Python")
plt.legend()
plt.tight_layout()
plt.show()

# ==============================
# Explicaci칩n sobre desempe침o
# ==============================

print("""
游빌 DIFERENCIAS ENTRE LENGUAJES COMPILADOS E INTERPRETADOS:

Los lenguajes compilados (como C++ o Go) traducen el c칩digo fuente directamente
a c칩digo m치quina antes de ejecutarse, lo que permite que el procesador ejecute
las instrucciones de forma nativa y mucho m치s r치pida.

En cambio, los lenguajes interpretados como Python dependen de un int칠rprete que
traduce el c칩digo l칤nea por l칤nea durante la ejecuci칩n, lo que introduce una
sobrecarga adicional en el rendimiento.

Por ello, se espera que las b칰squedas implementadas en C++ o Go sean
significativamente m치s r치pidas que en Python, especialmente en grandes vol칰menes
de datos, aunque los algoritmos sean id칠nticos.
""")